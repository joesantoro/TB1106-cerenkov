-------------------------------------------------------------------

     =========================================================
     Geant4 - an Object-Oriented Toolkit for Simulation in HEP
     =========================================================

                            Cerenkov energy spectrometer for clincal medical photon/electron beams
                            ----------------------------------------------------------------------

 This simulation investigates the feasibility of using the measured Cerenkov photon energy spectrum generated in a measurement tank of water to characterize the spatially-dependent energy
 spectrum of a photon or electron beam from a TruBeam medical LINAC. 

	
 1- GEOMETRY DEFINITION
	
   The geometry is constructed in the TB1106DetectorConstruction class.
   The setup consists of a a plexiglass water tank containing and water "evelope", a 
   50x50cm thin silicon dioxide slab functioning as a defacto CCD array, and an air world volume 

   The materials are created with the help of the G4NistManager class,
   which allows to build a material from the NIST database using their
   names. All available materials can be found in the Geant4 User's Guide
   for Application Developers, Appendix 10: Geant4 Materials Database.
		
 2- PHYSICS LIST
   The physics lists used in this simulation are defined in the TB1106PhysicsList class.
   We use the G4EmStandardPhysics list as well as the G4OpticalPhysics list.
   
   See more on installation of the datasets in Geant4 Installation Guide,
   Chapter 3.3: Note On Geant4 Datasets:
   http://geant4.web.cern.ch/geant4/UserDocumentation/UsersGuides
                                           /InstallationGuide/html/ch03s03.html
   The following datasets: G4LEDATA, G4LEVELGAMMADATA, G4NEUTRONXSDATA,
   G4SAIDXSDATA and G4ENSDFSTATEDATA are mandatory for this example.

   In addition the build-in interactive command:
               /process/(in)activate processName
   allows to activate/inactivate the processes one by one.
   
 3- ACTION INITALIZATION

   The class, TB1106ActionInitialization, instantiates and registers 
   to Geant4 kernel all user action classes.

   While in sequential mode the action classes are instatiated just once,
   via invoking the method:
      TB1106ActionInitialization::Build() 
   in multi-threading mode the same method is invoked for each thread worker
   and so all user action classes are defined thread-local.

   A run action class is instantiated both thread-local 
   and global that's why its instance is created also in the method
      TB1106ActionInitialization::BuildForMaster() 
   which is invoked only in multi-threading mode.
  	 
 4- PRIMARY GENERATOR
  
   The primary generator is defined in the TB1106PrimaryGeneratorAction class.
   The default kinematics is a 6 MeV gamma beam, randomly distributed in a 10x10cm
   area on the surface of the water envelope. The beam is directed in the -y direction.
   The beam origin is at y=+42.5cm (32.5cm above the surface of the water).
   This default setting can be changed via the Geant4 built-in commands 
   of the G4ParticleGun class.
     
 5- SENSITIVE DETECTOR
   
   A sensitive detector volume is defined in the TB1106SensitiveDetector class. For now
   it's an 50x50cm amorphous silicon slab emulating a CCD array. The Cerenkov photons generated
   in the water cube envelope (and elsewhere) are detected here. 
   Within the ProcessHits method of the class, a G4AnalysisManager object is instantiated
   and a "Hits" NTuple is filled with the detected Cerenokov track detected position (in the detector),
   the vertex position of the Cerenkov-generating track, the event number, the PDG code of the track. 
   This information can be used to correlate detected Cerenkov photons with their respective origin (vertex) 
   positions in the water tank (or other volume).
   
 6- CERENKOV PRODUCTION AND STEPPING ACTION CLASS
  
   This class is responsible for "stepping" particles generated by predefined physics processess
   through the volumes in the simulated world. We make use of this class here by filling a "Production"
   NTuple with Cerenkov-producing tracks. We instantiate the a G4AnalysisManager object and fill the 
   Production NTuple with the PDG code, vertex positions, momentum direction (direction cosines), event number,
   and number of Cerenkov photons generated for each Cerenkov-generating track.

    

   ********** ORIGINAL ***********************************************
   The energy deposited is collected step by step for a selected volume
   in TB1106SteppingAction and accumulated event by event in TB1106EventAction.

   At end of event, the value acummulated in TB1106EventAction is added in TB1106RunAction
   and summed over the whole run (see TB1106EventAction::EndOfevent()).

   Total dose deposited is computed at TB1106RunAction::EndOfRunAction(), 
   and printed together with informations about the primary particle.
   In multi-threading mode the energy accumulated in G4Accumulable objects per
   workers is merged to the master in TB1106RunAction::EndOfRunAction() and the final
   result is printed on the screen.
   
   G4Parameter<G4double> type instead of G4double type is used for the TB1106RunAction
   data members in order to facilitate merging of the values accumulated on workers 
   to the master.  Currently the accumulables have to be registered to G4AccumulablesManager
   and G4AccumulablesManager::Merge() has to be called from the users code. This is planned
   to be further simplified with a closer integration of G4Accumulable classes in
   the Geant4 kernel next year.

   An example of creating and computing new units (e.g., dose) is also shown 
   in the class constructor. 
   ********************************************************************************

 The following paragraphs are common to all basic examples

 A- VISUALISATION

   The visualization manager is set via the G4VisExecutive class
   in the main() function in exampleB1.cc.    
   The initialisation of the drawing is done via a set of /vis/ commands
   in the macro vis.mac. This macro is automatically read from
   the main function when the example is used in interactive running mode.

   By default, vis.mac opens an OpenGL viewer (/vis/open OGL).
   The user can change the initial viewer by commenting out this line
   and instead uncommenting one of the other /vis/open statements, such as
   HepRepFile or DAWNFILE (which produce files that can be viewed with the
   HepRApp and DAWN viewers, respectively).  Note that one can always
   open new viewers at any time from the command line.  For example, if
   you already have a view in, say, an OpenGL window with a name
   "viewer-0", then
      /vis/open DAWNFILE
   then to get the same view
      /vis/viewer/copyView viewer-0
   or to get the same view *plus* scene-modifications
      /vis/viewer/set/all viewer-0
   then to see the result
      /vis/viewer/flush

   The DAWNFILE, HepRepFile drivers are always available
   (since they require no external libraries), but the OGL driver requires
   that the Geant4 libraries have been built with the OpenGL option.

   From Release 9.6 the vis.mac macro in example B1 has additional commands
   that demonstrate additional functionality of the vis system, such as
   displaying text, axes, scales, date, logo and shows how to change
   viewpoint and style.  Consider copying these to other examples or
   your application.  To see even more commands use help or
   ls or browse the available UI commands in the Application
   Developers Guide, Section 7.1.

   For more information on visualization, including information on how to
   install and run DAWN, OpenGL and HepRApp, see the visualization tutorials,
   for example,
   http://geant4.slac.stanford.edu/Presentations/vis/G4[VIS]Tutorial/G4[VIS]Tutorial.html
   (where [VIS] can be replaced by DAWN, OpenGL and HepRApp)

   The tracks are automatically drawn at the end of each event, accumulated
   for all events and erased at the beginning of the next run.

 B- USER INTERFACES
 
   The user command interface is set via the G4UIExecutive class
   in the main() function in exampleB1.cc 
   The selection of the user command interface is then done automatically 
   according to the Geant4 configuration or it can be done explicitly via 
   the third argument of the G4UIExecutive constructor (see exampleB4a.cc). 
 
 C- HOW TO RUN

    - Execute exampleB1 in the 'interactive mode' with visualization:
        % ./exampleB1
      and type in the commands from run1.mac line by line:  
        Idle> /control/verbose 2
        Idle> /tracking/verbose 1
        Idle> /run/beamOn 10 
        Idle> ...
        Idle> exit
      or
        Idle> /control/execute run1.mac
        ....
        Idle> exit

    - Execute exampleB1  in the 'batch' mode from macro files 
      (without visualization)
        % ./exampleB1 run2.mac
        % ./exampleB1 exampleB1.in > exampleB1.out

	
